@using FairPreferentialChoiceAlgorithms.Services.Algorithms
@using FairPreferentialChoiceAlgorithms.Services.Heuristics

<h5 class="mt-3 mb-2 fw-bold">Eingabedaten</h5>
<div>
    <div class="row my-3">
        <div class="col">
            <label>Heuristik:</label>
            <select class="form-control" @bind="selectedHeuristicKey">
                @foreach (var heuristic in _heuristics)
                {
                    <option value="@heuristic.Name">@heuristic.Name</option>
                }
            </select>
        </div>

        <div class="col">
            <label>Algorithmus:</label>
            <select class="form-control" @bind="selectedAlgorithmKey">
                @foreach (var algorithm in _algorithms)
                {
                    <option value="@algorithm.Name">@algorithm.Name</option>
                }
            </select>
        </div>

        <div class="col">
            <label>Datensatz-Typ:</label>
            <select class="form-control" @onchange="OnDatasetTypeChanged">
                @foreach (var type in _allDatasets.Select(d => d.Type).Distinct())
                {
                    <option value="@type">@type</option>
                }
            </select>
        </div>

        <div class="col">
            <label>Datensatz:</label>
            <select class="form-control" @bind="selectedDatasetName">
                @foreach (var inputDataset in _allDatasets.Where(d => d.Type == selectedDatasetType))
                {
                    <option value="@inputDataset.Name">@inputDataset.Name</option>
                }
            </select>
        </div>

        <div class="col d-flex align-items-end">
            <button class="btn btn-primary w-100" @onclick="StartAssignment" disabled="@(!CanStart)">
                Zuteilung starten
            </button>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public AssignmentDataset? Dataset { get; set; }

    [Parameter]
    public EventCallback<AssignmentDataset> OnAssignmentDatasetCreated { get; set; }

    private List<IAssignmentHeuristic> _heuristics;
    private List<IAssignmentAlgorithm> _algorithms;
    private List<InputDataset> _allDatasets = new();

    private string? selectedHeuristicKey;
    private string? selectedAlgorithmKey;

    private IAssignmentHeuristic? SelectedHeuristic => _heuristics.FirstOrDefault(h => h.Name == selectedHeuristicKey);
    private IAssignmentAlgorithm? SelectedAlgorithm => _algorithms.FirstOrDefault(a => a.Name == selectedAlgorithmKey);
    private string? selectedDatasetType;
    private string? selectedDatasetName;
    private InputDataset? selectedInputDataset => _allDatasets.FirstOrDefault(d => d.Name == selectedDatasetName);

    protected override void OnInitialized()
    {
        _heuristics = new List<IAssignmentHeuristic>
        {
            new HeuristicNone(),
            new HeuristicOMX(1),
            new HeuristicOMX(2),
            new HeuristicOMX(3)
        };

        _algorithms = new List<IAssignmentAlgorithm>
        {
            new AlgorithmRSD(Random),
            new AlgorithmBOS(Random)
        };

        _allDatasets = InputDataService.Datasets.ToList();

        // Standardauswahl für Heuristik und Algorithmus
        selectedHeuristicKey = _heuristics.FirstOrDefault()?.Name;
        selectedAlgorithmKey = _algorithms.FirstOrDefault()?.Name;

        // Standardauswahl für Datensatztyp und Datensatz
        selectedDatasetType = _allDatasets.FirstOrDefault()?.Type;
        selectedDatasetName = _allDatasets.FirstOrDefault(d => d.Type == selectedDatasetType)?.Name;
    }

    private bool CanStart => SelectedHeuristic != null && SelectedAlgorithm != null && selectedInputDataset != null;

    private async Task OnDatasetTypeChanged(ChangeEventArgs e)
    {
        selectedDatasetType = e.Value?.ToString();

        selectedDatasetName = _allDatasets
            .FirstOrDefault(d => d.Type == selectedDatasetType)?.Name;

        await InvokeAsync(StateHasChanged);
    }

    private async Task StartAssignment()
    {
        if (!CanStart) return;

        var dataset = selectedInputDataset!;
        var heuristic = SelectedHeuristic!;
        var algorithm = SelectedAlgorithm!;

        AssignmentDataset result = heuristic.CreateAssignment(dataset, algorithm);
        result.InputDatasetName = dataset.Name;
        result.InputDatasetType = dataset.Type;
        result.AlgorithmName = algorithm.Name;
        result.HeuristicName = heuristic.Name;

        Dataset = result;

        await OnAssignmentDatasetCreated.InvokeAsync(result);
    }
}
